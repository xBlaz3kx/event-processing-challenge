version: "3.9"
services:

  # Traefik is a reverse proxy and load balancer that makes deploying microservices easy.
  # Used for local development and testing.
  traefik:
    image: "traefik:v3.0"
    container_name: "traefik"
    restart: always
    command:
      - "--ping=true"
      - "--api.insecure=true"
      - "--api.dashboard=true"
      - "--providers.docker=true"
      - "--entrypoints.http.address=:80"
      - "--entrypoints.https.address=:443"
      - "--entrypoints.metrics.address=:9090"
      - "--accesslog=true"
      - "--accesslog.format=json"
      - "--log.level=debug"
      - "--log.format=json"
      - "--core.defaultRuleSyntax=v2"
      - "--metrics.prometheus=true"
      - "--metrics.prometheus.entryPoint=metrics"
      - "--tracing.otlp.grpc.endpoint=lgtm-stack:4317"
      - "--tracing.otlp.grpc=true"
      - "--tracing.otlp.grpc.insecure=true"
      - "--metrics.otlp=true"
      - "--metrics.otlp.grpc.endpoint=lgtm-stack:4317"
      - "--metrics.otlp.grpc.insecure=true"
      - "--metrics.otlp.addRoutersLabels=true"
      - "--metrics.otlp.addServicesLabels=true"
    ports:
      - "80:80"
    volumes:
      - "/var/run/docker.sock:/var/run/docker.sock:ro"
    healthcheck:
      test: wget --spider --tries=1 http://localhost:8080/ping || exit 1
      interval: 10s
      timeout: 5s
      retries: 3

  # Benthos is a stream processor, used for Kafka message enrichment.
  benthos:
    image: jeffail/benthos:latest
    hostname: benthos
    restart: on-failure
    command: "-w --chilled -c ./config.yaml -r ./resources.yaml streams ./streams/*.yaml"
    profiles:
      - emanual
    volumes:
      - ../configs/benthos/config.yaml:/config.yaml
      - ../configs/benthos/resources.yaml:/resources.yaml
      - ../configs/benthos/streams:/streams
    depends_on:
      - kafka
    healthcheck:
      test: curl -f http://localhost:4195/ready || exit 1
      start_period: 15s
      interval: 15s
      timeout: 5s
      retries: 3

  # Using redis as a caching mechanism for the application. Using redis stack because of the UI.
  redis:
    image: redis/redis-stack:latest
    hostname: redis
    container_name: redis
    restart: on-failure
    labels:
      - traefik.enable=true
      - traefik.tags=public
      - traefik.http.services.redis.loadbalancer.server.port=8001
      - traefik.http.routers.redis.rule=Host(`redis.localhost`)
      - traefik.http.routers.redis.service=redis
      - traefik.http.routers.redis.entrypoints=http
    volumes:
      - redis:/data
    healthcheck:
      test: [ "CMD", "redis-cli", "ping" ]
      start_period: 10s
      interval: 10s
      timeout: 5s
      retries: 3

  player-service:
    image: xblaz3kx/player-service
    restart: on-failure
    build:
      context: ../..
      dockerfile: ./build/Dockerfile_player
    command: -c /config/config.yaml
    depends_on:
      - kafka
      - database
    labels:
      - traefik.enable=true
      - traefik.tags=public
      - traefik.http.services.player-service.loadbalancer.server.port=8080
      - traefik.http.routers.player-service.rule=Host(`api.localhost`) && PathPrefix(`/player`)
      - traefik.http.routers.player-service.service=player-service
      - traefik.http.routers.player-service.entrypoints=http
    volumes:
      - ../configs/player.service.yaml:/config/config.yaml

  currency-service:
    image: xblaz3kx/currency-service
    restart: on-failure
    build:
      context: ../..
      dockerfile: ./build/Dockerfile_currency
    command: -c /config/config.yaml
    depends_on:
      - kafka
      - redis
    labels:
      - traefik.enable=true
      - traefik.tags=public
      - traefik.http.services.currency-service.loadbalancer.server.port=8080
      - traefik.http.routers.currency-service.rule=Host(`api.localhost`) && PathPrefix(`/currency`)
      - traefik.http.routers.currency-service.service=currency-service
      - traefik.http.routers.currency-service.entrypoints=http
    volumes:
      - ../configs/currency.service.yaml:/config/config.yaml

  description-service:
    image: xblaz3kx/description-service
    restart: on-failure
    build:
      context: ../..
      dockerfile: ./build/Dockerfile_description
    command: -c /config/config.yaml
    depends_on:
      - kafka
    labels:
      - traefik.enable=true
      - traefik.tags=public
      - traefik.http.services.description-service.loadbalancer.server.port=8080
      - traefik.http.routers.description-service.rule=Host(`api.localhost`) && PathPrefix(`/events/description`)
      - traefik.http.routers.description-service.service=description-service
      - traefik.http.routers.description-service.entrypoints=http
    volumes:
      - ../configs/description.service.yaml:/config/config.yaml

  log-service:
    image: xblaz3kx/log-service
    restart: on-failure
    build:
      context: ../..
      dockerfile: ./build/Dockerfile_log
    command: -c /config/config.yaml
    depends_on:
      - kafka
    labels:
      - traefik.enable=true
      - traefik.tags=public
      - traefik.http.services.log-service.loadbalancer.server.port=8080
      - traefik.http.routers.log-service.rule=Host(`api.localhost`) && PathPrefix(`/materialize`)
      - traefik.http.routers.log-service.service=description-service
      - traefik.http.routers.log-service.entrypoints=http
    volumes:
      - ../configs/log.service.yaml:/config/config.yaml

  # Generating the events
  generator:
    image: xblaz3kx/generator:latest
    build:
      context: ../..
      dockerfile: ./build/Dockerfile_generator
    environment:
      - KAFKA_BROKERS=kafka:9092
    profiles:
      - manual

  # Database for the application
  database:
    image: postgres:14-alpine
    hostname: postgres
    environment:
      - POSTGRES_USER=casino
      - POSTGRES_PASSWORD=casino
    volumes:
      - "../../scripts/db/migrations:/docker-entrypoint-initdb.d"
    ports:
      - "5432:5432"
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready" ]
      interval: 10s
      timeout: 5s
      retries: 5

volumes:
  redis:
  postgres: